{"version":3,"sources":["Header.module.css","features/editor/utils.js","features/editor/editorSlice.js","app/store.js","serviceWorker.js","HintsList.js","Editor.js","View.js","Header.js","Layout.js","index.js","HintsList.module.css"],"names":["module","exports","loadDictionaries","language","a","aff_dict_path","req","dic_dict_path","fetch","then","r","status","text","aff","dic","startSpellCheck","cm","spellchecker","spellcheckOverlay","removeOverlay","separators","token","stream","ch","peek","word","includes","next","test","correct","addOverlay","downloadDictionaryAsync","createAsyncThunk","lang","console","log","editorSlice","createSlice","name","initialState","dictionaries","documentName","supportedLanguages","download_name","reducers","set_text","state","action","payload","set_document_name","set_language","set_status","change_word","line","len","newWord","lines","split","slice","join","extraReducers","builder","addCase","pending","fulfilled","actions","selectDictionaries","editor","selectText","selectDocumentName","selectSupportedLanguages","selectLanguage","find","x","selectStatus","store","configureStore","reducer","editorReducer","devTools","Boolean","window","location","hostname","match","HintsList","position","list","visible","changeWord","left","top","className","styles","listBody","onClick","e","stopPropagation","target","classList","contains","listChild","textContent","style","visibility","length","noCorrections","map","i","defaultHintListParams","_","Editor","useSelector","dispatch","useDispatch","useState","hintsListParams","setHintsListParams","useRef","useEffect","current","Nspell","reduce","b","rect","getBoundingClientRect","suggest","coordsChar","value","options","mode","lineNumbers","lineWrapping","editorDidMount","setSize","onBeforeChange","data","onScroll","View","plugins","gfm","Header","selectStyles","control","base","width","menu","provided","zIndex","headerBody","logo","placeholder","type","onChange","saveDocumentButton","item","localStorage","getItem","setItem","disabled","smallText","defaultValue","label","l","getState","isDisabled","color","height","Layout","overflow","paddingLeft","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31d4b570.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBody\":\"Header_headerBody__3Azc2\",\"documentName\":\"Header_documentName__1Vg2K\",\"logo\":\"Header_logo__w76qF\",\"smallText\":\"Header_smallText__11eH_\",\"saveDocumentButton\":\"Header_saveDocumentButton__2TIg6\"};","async function loadDictionaries(language) {\n    const req = 'https://raw.githubusercontent.com/titoBouzout/Dictionaries/master/'\n\n    let aff_dict_path = `${req}${language}.aff`\n    let dic_dict_path = `${req}${language}.dic`\n\n    const aff = await fetch(aff_dict_path).then(r => r.status === 200 ? r.text() : '')\n    const dic = await fetch(dic_dict_path).then(r => r.status === 200 ? r.text() : '')\n\n    return {language, aff, dic}\n}\n\nfunction startSpellCheck(cm, spellchecker) {\n    if (cm.spellcheckOverlay) {\n        cm.removeOverlay(cm.spellcheckOverlay)\n    }\n\n    const separators = '!\\'\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~ '\n    cm.spellcheckOverlay = {\n        token: function (stream) {\n            let ch = stream.peek()\n            let word = \"\"\n\n            if (separators.includes(ch) || ch === '\\uE000' || ch === '\\uE001') {\n                stream.next()\n                return null\n            }\n\n            while ((ch = stream.peek()) && !separators.includes(ch)) {\n                word += ch\n                stream.next()\n            }\n\n            if (!/^[\\p{L}]+$/u.test(word))\n                return null\n\n            if (!spellchecker.correct(word)) {\n                return \"spell-error\"\n            }\n        }\n    }\n\n    cm.addOverlay(cm.spellcheckOverlay)\n}\n\nexport {loadDictionaries, startSpellCheck}","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport {loadDictionaries} from './utils';\n\nconst initialState = {\n    text: '',\n    dictionaries: {},\n    documentName: '',\n    supportedLanguages: [\n        {name: 'english', download_name: 'English (American)'},\n        // {name: 'mongolian', download_name: 'Mongolian'},\n        {name: 'spanish', download_name: 'Spanish'}\n    ],\n    status: 'idle',\n    language: 'english'\n};\n\nexport const downloadDictionaryAsync = createAsyncThunk(\n    'editor/fetchCount',\n    async (lang) => {\n        console.log('downloading dict: ' + lang)\n        return await loadDictionaries(lang);\n    }\n);\n\nexport const editorSlice = createSlice({\n    name: 'editor',\n    initialState,\n    reducers: {\n        set_text: (state, action) => {\n            state.text = action.payload\n        },\n        set_document_name: (state, action) => {\n            state.documentName = action.payload\n        },\n        set_language: (state, action) => {\n            state.language = action.payload\n        },\n        set_status : (state, action) => {\n            state.status = action.payload\n        },\n        change_word: (state, action) => {\n            const {line, ch, len, newWord} = action.payload\n            let lines = state.text.split('\\n')\n            lines[line] = lines[line].slice(0, ch) + newWord + lines[line].slice(ch + len)\n            state.text = lines.join('\\n')\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(downloadDictionaryAsync.pending, (state) => {\n                state.status = 'loading dictionaries';\n            })\n            .addCase(downloadDictionaryAsync.fulfilled, (state, action) => {\n                state.status = 'idle';\n                state.dictionaries[action.payload.language] = {aff: action.payload.aff, dic: action.payload.dic}\n            });\n    },\n});\n\nexport const {set_text, set_document_name, set_status, change_word} = editorSlice.actions;\n\nexport const selectDictionaries = (state) => state.editor.dictionaries;\nexport const selectTheme = (state) => state.editor.theme\nexport const selectText = (state) => state.editor.text\nexport const selectDocumentName = (state) => state.editor.documentName\nexport const selectSupportedLanguages = (state) => state.editor.supportedLanguages\nexport const selectLanguage = (state) => {\n    return state.editor.supportedLanguages.find(x => x.name === state.editor.language)\n}\nexport const selectStatus = (state) => state.editor.status\n\nexport const setLanguage = (lang) => (dispatch, getState) => {\n    const dictionaries = selectDictionaries(getState())\n    if (!(lang.download_name in dictionaries)) {\n        dispatch(downloadDictionaryAsync(lang.download_name))\n    }\n    dispatch(editorSlice.actions.set_language(lang.name))\n};\n\nexport default editorSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport editorReducer from '../features/editor/editorSlice';\n\nexport const store = configureStore({\n  reducer: {\n    editor: editorReducer,\n  },\n  devTools: true\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport styles from \"./HintsList.module.css\";\r\n\r\nfunction HintsList({position, list, visible, changeWord}) {\r\n    const [left, top] = position\r\n\r\n    const onClick = e => {\r\n        e.stopPropagation()\r\n        if (e.target.classList.contains(styles.listChild)) {\r\n            changeWord(e.target.textContent)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={styles.listBody}\r\n            onClick={onClick}\r\n            style={{position: 'absolute', left: left, top: top + 20, visibility: visible ? 'visible' : 'hidden'}}\r\n        >\r\n            {list.length === 0\r\n                ? <div className={styles.noCorrections}>no replacements</div>\r\n                : list.map((e, i) => <div className={styles.listChild} key={i}>{e}</div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HintsList","import 'codemirror'\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/mode/markdown/markdown.js';\r\nimport 'codemirror/mode/gfm/gfm.js';\r\n\r\nimport {Controlled as CodeMirror} from 'react-codemirror2'\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    change_word,\r\n    downloadDictionaryAsync,\r\n    selectDictionaries,\r\n    selectLanguage,\r\n    selectStatus,\r\n    selectText, set_status,\r\n    set_text\r\n} from \"./features/editor/editorSlice\";\r\nimport Nspell from 'nspell'\r\nimport {startSpellCheck} from \"./features/editor/utils\";\r\nimport HintsList from \"./HintsList\";\r\n\r\nconst defaultHintListParams = {\r\n    position: [0, 0],\r\n    list: [],\r\n    visible: false,\r\n    changeWord: _ => {}\r\n}\r\n\r\nfunction Editor() {\r\n    const text = useSelector(selectText)\r\n    const dispatch = useDispatch()\r\n    const language = useSelector(selectLanguage)\r\n    const dictionaries = useSelector(selectDictionaries)\r\n    const status = useSelector(selectStatus)\r\n\r\n    const [hintsListParams, setHintsListParams] = useState(defaultHintListParams)\r\n\r\n    const cm = useRef()\r\n    const spellchecker = useRef()\r\n\r\n    useEffect(() => {\r\n        if (!(language.download_name in dictionaries) && status === 'idle') {\r\n            dispatch(downloadDictionaryAsync(language.download_name))\r\n        }\r\n    }, [language, dictionaries, dispatch, status])\r\n\r\n    useEffect(() => {\r\n        if (language.download_name in dictionaries) {\r\n            dispatch(set_status('building spellchecker'));\r\n            (async () => {\r\n                spellchecker.current = Nspell(dictionaries[language.download_name].aff, dictionaries[language.download_name].dic)\r\n                startSpellCheck(cm.current, spellchecker.current)\r\n                dispatch(set_status('idle'))\r\n                console.log('Spellcheck changed: ', language.name)\r\n            })()\r\n        }\r\n    }, [dictionaries, dispatch, language])\r\n\r\n    return (\r\n        <div onClick={e => {\r\n            const target = e.target\r\n            const ignoreSpellChecking = ['cm-comment', 'cm-url', 'cm-link']\r\n            if (target.classList.contains('cm-spell-error') && !ignoreSpellChecking.map(className => target.classList.contains(className)).reduce((a, b) => a || b)) {\r\n                const rect = target.getBoundingClientRect()\r\n\r\n                setHintsListParams({\r\n                    position: [rect.left, rect.top],\r\n                    list: spellchecker.current.suggest(e.target.textContent),\r\n                    visible: true,\r\n                    changeWord: (newWord) => {\r\n                        const {line, ch} = cm.current.coordsChar({left: rect.left, top: rect.top}, 'page')\r\n                        dispatch(change_word({line, ch, len: target.textContent.length, newWord}))\r\n                        setHintsListParams(defaultHintListParams)\r\n                    }\r\n                })\r\n            } else {\r\n                setHintsListParams(defaultHintListParams)\r\n            }\r\n        }}>\r\n            <CodeMirror\r\n                value={text}\r\n                options={{\r\n                    mode: 'gfm',\r\n                    lineNumbers: true,\r\n                    lineWrapping: true\r\n                }}\r\n                editorDidMount={editor => {\r\n                    editor.setSize('100%', 'var(--child-height)')\r\n                    cm.current = editor\r\n                }}\r\n                onBeforeChange={(editor, data, value) => {\r\n                    dispatch(set_text(value))\r\n                }}\r\n                onScroll={() => setHintsListParams(defaultHintListParams)}\r\n            />\r\n            <HintsList\r\n                position={hintsListParams.position}\r\n                list={hintsListParams.list}\r\n                visible={hintsListParams.visible}\r\n                changeWord={hintsListParams.changeWord}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Editor;\r\n","import ReactMarkdown from 'react-markdown'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectText} from \"./features/editor/editorSlice\";\r\nimport gfm from 'remark-gfm'\r\n\r\nfunction View() {\r\n    const text = useSelector(selectText)\r\n\r\n    return (\r\n        <ReactMarkdown plugins={[gfm]}>{text}</ReactMarkdown>\r\n    )\r\n}\r\n\r\nexport default View","import styles from \"./Header.module.css\";\r\nimport {\r\n    selectDocumentName, selectLanguage, selectStatus,\r\n    selectSupportedLanguages, selectText,\r\n    set_document_name, set_text,\r\n    setLanguage\r\n} from \"./features/editor/editorSlice\";\r\nimport React from \"react\";\r\nimport Select from 'react-select'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction Header() {\r\n    const dispatch = useDispatch()\r\n    const documentName = useSelector(selectDocumentName)\r\n    const supportedLanguages = useSelector(selectSupportedLanguages)\r\n    const status = useSelector(selectStatus)\r\n    const language = useSelector(selectLanguage)\r\n    const text = useSelector(selectText)\r\n\r\n    const selectStyles = {\r\n        control: base => ({\r\n            ...base,\r\n            width: '200px'\r\n        }),\r\n        menu: provided => ({...provided, zIndex: 9999})\r\n    };\r\n\r\n    return (\r\n        <div className={styles.headerBody}>\r\n            <div className={styles.logo}>\r\n                Grazie<span>Web</span>\r\n            </div>\r\n            <input\r\n                className={styles.documentName}\r\n                placeholder='Document name'\r\n                value={documentName}\r\n                type='text'\r\n                onChange={e => dispatch(set_document_name(e.target.value))}\r\n            />\r\n            <button\r\n                className={styles.saveDocumentButton}\r\n                onClick={() => {\r\n                    if (text.length === 0) {\r\n                        const item = localStorage.getItem(documentName)\r\n                        if (item !== null) {\r\n                            dispatch(set_text(item))\r\n                        } else {\r\n                            dispatch(set_document_name('Bad name'))\r\n                        }\r\n                    } else {\r\n                        localStorage.setItem(documentName, text)\r\n                    }\r\n                }}\r\n                disabled={documentName.length === 0}\r\n            >\r\n                {text.length === 0 ? 'Load document' : 'Save document'}\r\n            </button>\r\n            <span className={styles.smallText}>Spellcheck language:</span>\r\n            <Select\r\n                defaultValue={{value: language.download_name, label: language.name}}\r\n                options={supportedLanguages.map(l => ({value: l.download_name, label: l.name}))}\r\n                styles={selectStyles}\r\n                placeholder='Select language'\r\n                onChange={e => dispatch(setLanguage({name: e.label, download_name: e.value}))}\r\n                isDisabled={status !== 'idle'}\r\n            />\r\n            <Loader\r\n                visible={status !== 'idle'}\r\n                type='TailSpin'\r\n                color='blue'\r\n                height='30px'\r\n                width='30px'\r\n            />\r\n            {status === 'idle' ? '' : status}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import Editor from './Editor'\r\nimport View from './View'\r\nimport Header from './Header'\r\nimport './Layout.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {set_text} from \"./features/editor/editorSlice\";\r\n\r\nfunction Layout() {\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className='box'>\r\n            <div className='header'>\r\n                <Header/>\r\n            </div>\r\n            <div className='editor'>\r\n                <div className='column-header'>\r\n                    Markdown:\r\n                    <button\r\n                        className='clear-button'\r\n                        onClick={() => dispatch(set_text(''))}\r\n                    >\r\n                        x\r\n                    </button>\r\n                </div>\r\n                <Editor/>\r\n            </div>\r\n            <div className='view'>\r\n                <div className='column-header'>\r\n                    Preview:\r\n                </div>\r\n                <div style={{overflow: \"auto\", paddingLeft: '10px'}}>\r\n                    <View/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport Layout from \"./Layout\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listBody\":\"HintsList_listBody__38p2b\",\"listChild\":\"HintsList_listChild__1m-Dh\",\"noCorrections\":\"HintsList_noCorrections__1UYIp\"};"],"sourceRoot":""}